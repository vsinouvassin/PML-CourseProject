rstd <- resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit, out2)
dy/(2*sigma^2)
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
mdl <- lm(Fertility ~ Agriculture + Education + Catholic + Infant.Mortality, swiss)
mdl2 <- lm(Fertility ~ Agriculture + Education + Catholic + Infant.Mortality, swiss)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1,fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
ravenData
mdl <- glm(ravenWinNum ~ ravenScore,family,ravenData)
mdl <- glm(ravenWinNum ~ ravenScore,binomial,ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
nxt()
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(visits ~ date, poisson, hits, offset=log(visits+1))
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
swirl()
data <- mtcars
data
summary(data)
str(data)
data(mtcars)
mtcars
boxplot(mpg ~ am, xlab="Transmission (0 = Automatic, 1 = Manual)", ylab="MPG",
main="Boxplot of MPG vs. Transmission")
data(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
boxplot(mpg ~ am, data = mtcars, xlab="Transmission (0 = Automatic, 1 = Manual)", ylab="MPG", main="Boxplot of MPG vs. Transmission")
ggplot(mtcars, aes(am,mpg))+geom_boxplot()+ylab("Miles per gallon") + xlab("Transmission") + ggtitle("Miles per gallons depending on the type of Transmission")
require(ggplot2)
ggplot(mtcars, aes(am,mpg))+geom_boxplot()+ylab("Miles per gallon") + xlab("Transmission") + ggtitle("Miles per gallons depending on the type of Transmission")
ggplot(mtcars, aes(am,mpg))+geom_boxplot()+ylab("Miles per gallon") + xlab("Transmission") + ggtitle("Figure 1: Miles per gallons depending on the type of Transmission")
ggplot(mtcars, aes(am,mpg))+geom_boxplot()+ylab("Miles per gallon") + xlab("Transmission") + ggtitle("Figure 1: Miles per gallons depending on the type of Transmission") + scale_colour_discrete(labels=c("Automatic", "Manual"))
pairs(mtcars, panel=panel.smooth, main="Pair Graph of Motor Trend Car Road Tests")
ggpairs(subset(mtcars, select = c(1,2,3,5,9,11)),
colour = 'transmission', alpha = 0.6,
title = "Figure 3: Pair relationships in the mtcars dataset. Blue: manual, Red: automatic")
library(graphics)
ggpairs(subset(mtcars, select = c(1,2,3,5,9,11)),
colour = 'transmission', alpha = 0.6,
title = "Figure 3: Pair relationships in the mtcars dataset. Blue: manual, Red: automatic")
library(GGally)
require(GGally)
install(GGally)
plotmatrix(mtcars[,1:3])
ggpairs(iris, colour='Species', alpha=0.4)
GGally::ggpairs(iris, colour='Species', alpha=0.4)
install.packages("GGally")
ggpairs(subset(mtcars, select = c(1,2,3,5,9,11)),
colour = 'transmission', alpha = 0.6,
title = "Figure 3: Pair relationships in the mtcars dataset. Blue: manual, Red: automatic")
GGally::ggpairs(iris, colour='Species', alpha=0.4)
GGally::ggpairs(subset(mtcars, select = c(1,2,3,5,9,11)),
colour = 'transmission', alpha = 0.6,
title = "Figure 3: Pair relationships in the mtcars dataset. Blue: manual, Red: automatic")
GGally::ggpairs(subset(mtcars, select = c(1,2,3,5,9,11)),
colour = 'am', alpha = 0.6,
title = "Figure 3: Pair relationships in the mtcars dataset. Blue: manual, Red: automatic")
pairs(mtcars, panel=panel.smooth, main="Pair Graph of Motor Trend Car Road Tests")
ggplot(mtcars, aes(am,mpg))+geom_boxplot()+ylab("Miles per gallon") + xlab("Transmission") + ggtitle("Figure 1: Miles per gallons depending on the type of Transmission") + scale_colour_discrete(labels=c("Automatic", "Manual"))
pairs(mtcars, panel=panel.smooth, main="Pair Graph of Motor Trend Car Road Tests")
fitFull <- lm(mpg ~ ., mtcars)
fitOne <- lm(mpg ~ am, mtcars)
fitCorr <- lm(mpg ~ am + wt + disp + drat + cyl)
fitCorr <- lm(mpg ~ am + wt + disp + drat + cyl, mtcars)
anova(fitFull,fitOne)
anova(fitCorr,fitOne)
anova(fitOne,fitCorr)
summary(fitOne)$coef
summary(fitOne)
summary(fitCorr)
summary(fitFull)
sort(cor(mtcars)[1,])
sort(cor(data)[1,])
sort(cor(data)[9,])
bestfit <- lm(mpg~am + wt + hp, data = mtcars)
summary(bestfit)$coef
summary(bestfit)
sort(cor(data)[1,])
cov(mtcars$disp,mtcars$cyl)
cor(mtcars$disp,mtcars$cyl)
corr(mtcars$disp,mtcars$cyl)
cor(data$disp,data$cyl)
step(fullModel, k=log(nrow(mtcars)))
step(fitFull, k=log(nrow(mtcars)))
t.test(mpg~am)
t.test(mpg~am,mtcars)
t.test(mpg~am,mtcars)$p.value
t.test(mpg~am,mtcars)$estimate
vif(fitFull)
require(stats)
vif(fitFull)
require(car)
vif(fitFull)
sqrt(vif(fitFull))
vif(fitFull)
fitVif <- lm(mpg ~ am+wt+hp+disp+cyl, data = mtcars)
summary(fitVif)
summary(fitOne)
summary(fitFull)
summary(fitOne)
summary(fitFull)
fitVif <- lm(mpg ~ am+wt+hp+disp+cyl, data = mtcars)
summary(fitVif)
step(fitFull, direction="both")
summary(lm(formula = mpg ~ cyl + hp + wt + am, data = mtcars))
step(fitFull, direction="backward")
stepModel <- step(fullModel, k=log(nrow(mtcars)))
stepModel <- step(fitFull, k=log(nrow(mtcars)))
summary(stepmodel)
summary(stepModel)
summary(lm(formula = mpg ~ hp + wt + am, data = mtcars))
summary(lm(formula = mpg ~ hp + wt + am -1, data = mtcars))
summary(lm(formula = mpg ~ cyl + hp + wt + am -1, data = mtcars))
fitStep <- step(fitFull, direction="both")
summary(fitStep)
fitNear <- lm(mpg ~ hp + wt + am, data = mtcars)
summary(fitNear)
fitFinal <- lm(mpg ~ hp + wt + am -1, data = mtcars)
summary(fitFinal)
fitFinal$residuals
residuals(fitFinal)
plot(residuals(fitFinal))
plot(fitFinal)
sumFinal <- summary(fitFinal)
sumFinal$coef
sumFinal$ftstat
sumFinal$fstat
sumFinal
resid(fitFull)
fitRes <- resid(fitFinal)
plot(tcars$mpg, fitRes, ylab="Residuals", xlab="Miles per Gallon", main="Residual Plot")
plot(mtcars$mpg, fitRes, ylab="Residuals", xlab="Miles per Gallon", main="Residual Plot")
abline(0, 0)
plot(fitFull)
install.packages("MASS")
library(MASS)
data(shuttle)
shuttle$useNum[shuttle$use == 'auto'] <- 1
shuttle$useNum[shuttle$use == 'noauto'] <- 0
shuttle$windFactor <- factor(shuttle$wind)
logAutolander1 <- glm(shuttle$useNum ~ shuttle$windFactor, family='binomial')
summary(logAutolander1)
data(shuttle)
shuttle$useNum[shuttle$use == 'auto'] <- 1
shuttle$useNum[shuttle$use == 'noauto'] <- 0
shuttle$windFactor <- factor(shuttle$wind)
shuttle$windMagnFactor <- factor(shuttle$magn)
logAutolander2 <- glm(shuttle$useNum ~ shuttle$windFactor + shuttle$windMagnFactor, family='binomial')
summary(logAutolander2)
exp(logAutolander2$coef)
data(InsectSprays)
subsetSpray <- InsectSprays[InsectSprays$spray == 'A' | InsectSprays$spray == 'B',]
poissonInsectSpray <- glm(subsetSpray$count ~ subsetSpray$spray, family='poisson')
summary(poissonInsectSpray)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots<-c(0)
splineTerms<-sapply(knots, function(knot)(x > knot)*(x - knot))
xMat<-cbind(1,x,splineTerms)
linearModel <- lm(y~xMat-1)
yhat<-predict(linearModel)
plot(x,y,frame=FALSE,pch=21,bg="lightblue",cex=2)
lines(x,yhat,col="red",lwd=2)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
import.packages(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
concrete
head(concrete)
summary(concrete)
concrete$Superplasticizer
hist(concrete$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(adData)
head(AlzheimerDisease)
head(adData,1)
colNames(adData)
colnames(adData)
adData(,58)
adData[,58]
preProcess(log10(adData[,58]+1),method="pca",pcaComp=2)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training
head(training)
?grep
names(training)
grep('ÃŽL',names(training))
grep('^IL',names(training))
?preprocess
?preProcess
preProcess(training(,grep('^IL',nams(training))),method='pca',thresh=0.9,
outcome=training$diagnosis)
preProcess(training(,grep('^IL',names(training))),method='pca',thresh=0.9,
outcome=training$diagnosis)
preProcess(training[,grep('^IL',names(training))],method='pca',thresh=0.9,
outcome=training$diagnosis)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preProcess(training[,grep('^IL',names(training))], method='pca', thresh=0.8,
outcome=training$diagnosis)
preProcess(training[,grep('^IL',names(training))], method='pca', thresh=0.9,
outcome=training$diagnosis)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
test <- segmentationOriginal[-inTrain,]
?rpart
set.seed(125)
modelFit <- rpart(Case ~ ., data=segmentationOriginal, model='CART')
library(rpart)
modelFit <- rpart(Case ~ ., data=segmentationOriginal, model='CART')
modelFit <- rpart(Case ~ ., data=segmentationOriginal, method='CART')
fit <- rpart(Case ~ ., data=segmentationOriginal, method='class')
plot(fit)
fit
set.seed(125)
fit <- train(Case ~ ., data=training, method="rpart")
install.packages('e1071', dependencies=TRUE)
fit <- train(Case ~ ., data=training, method="rpart")
plot(fit)
fit
predict(fit,newdata=test)
segmentationOriginal$Case
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
test <- segmentationOriginal[-inTrain,]
set.seed(125)
fit <- train(Case ~ ., data=training, method="rpart")
predict(fit,newdata=test)
segmentationOriginal$Case
summary(segmentationOriginal)
fit <- train(Class ~ ., data=training, method="rpart")
predict(fit,newdata=test)
test
test[ TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2]
test[ ,TotalIntench2 = 23,000]
test[ ,test$TotalIntench2 = 23,000]
test[which(test$TotalIntench2 = 23,000),]
test[which(test$TotalIntench2 = 23000),]
test[which(test$TotalIntench2 == 23000),]
test[which(segmentationOriginal$TotalIntench2 == 23000),]
segmentationOriginal[,segmentationOriginal$TotalIntench2 == 23000]
segmentationOriginal[which(segmentationOriginal$TotalIntench2 == 23000),]
fit
plot(fit$finalModel)
plot(fit$finalModel,uniform="T")
text(cartModel$finalModel, cex=0.8)
text(fit$finalModel, cex=0.8)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
clr
clear
rm(list=ls())
library(pgmm)
data(olive)
olive = olive[,-1]
fit <- train(Area ~ ., data = "olive", method="rpart")
fit <- train(Area ~ ., data = olive, method="rpart")
newdata = as.data.frame(t(colMeans(olive)))
predit(fit$finalModel,newdata)
predict(fit$finalModel,newdata)
rm(list=ls())
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
train
trainSA
summary(trainSA)
str(trainSA)
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family = "binomial")
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data= trainSA, method="glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(fit$finalModel,trainSA)
str(trainSA)
missClass(trainSA,fit$finalModel)
predict(fit$finalModel,trainSA)
predTrain <- predict(fit,trainSA)
missClass(trainSA, predTrain)
predTrain <- predict(fit,testSA)
missClass(testSA, predTrain)
missClass(testSA, predTest)
missClass(testSA$chd, predTrain)
predTrain <- predict(fit,trainSA)
missClass(trainSA$chd, predTrain)
rm(list=ls())
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
?factor
factor(vowel.train$y)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
str(vowel.train)
str(vowel.test)
set.seed(33833)
fit <- train(y~., data=vowel.train,method="rf",prow=TRUE)
fit <- train(y~., data=vowel.train,method="rf",prox=TRUE)
fit <- train(y~., data=vowel.train,method="rf",prox=TRUE, importance=FALSE)
?varimp
library(caret)
?varimp
??varimp
varImp(fit)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
fit1 <- train(y ~ ., data=vowel.train, method="rf", prox=TRUE)
library(caret)
fit1 <- train(y ~ ., data=vowel.train, method="rf", prox=TRUE)
fit2 <- train(y ~ ., data=vowel.train, method="gbm", verbose=FALSE)
vowel.fit <- data.frame(fit1, fit2, y=vowel.test$y)
pred1 <- predict(fit1,vowel.test)
pred2 <- predict(fit2,vowel.test)
vowel.fit <- data.frame(pred1, pred2, y=vowel.test$y)
fit3 <- train(y ~., data=vowel.fit, method="gam")
pred3 <- predict(fit3,vowel.test)
pred3 <- predict(fit3,vowel.fit)
sqrt(sum((pred1-vowel.test$y)^2))
vowel.test$y
pred3
vowel.fit
fit3 <- train(y ~., data=vowel.fit, method="gam")
confusionMatrix(fit1, vowel.test$y)$overall[1]
confusionMatrix(fit1, vowel.test$y)$overall
confusionMatrix(fit1, vowel.test$y)
fit1 <- train(y ~ ., data=vowel.train, method="rf")
fit2 <- train(y ~ ., data=vowel.train, method="gbm")
pred1 <- predict(fit1,vowel.test)
pred2 <- predict(fit2,vowel.test)
confusionMatrix(fit1, vowel.test$y)$overall[1]
require(caret)
require(randomForest)
require(lda)
require(stats)
require(NB)
init_data <- read.csv("pml-training.csv", na.strings=c("", "NA"))
setwd("D:/Vinoth/Etudes/Practical Machine Learning")
init_data <- read.csv("pml-training.csv", na.strings=c("", "NA"))
colNA <- sapply(init_data, function(y) sum(length(which(is.na(y))))) #getting the number of NA per column
cleanData <- init_data[,colNA==0] #filtering only columns where there is no NA
cleanData <- cleanData[,-c(1,2,3,4,5,6,7)]
set.seed(357) #setting seed
inTrain <- createDataPartition(y=cleanData$classe, p=0.7, list=FALSE)
training <- cleanData[inTrain,]
testing <- cleanData[-inTrain,]
?NB
?lda
fit_lda <- lda(classe ~ ., data=training)
require(MASS)
fit_lda <- lda(classe ~ ., data=training)
?predict
predict(fit_lda)
predict(fit_lda,testing$classe)
pred <- predict(fit_lda,testing)
?confusionMatrix
confusionMatrix(pred,testing$classe)
str(pred)
confusionMatrix(pred$classe,testing$classe)
pred <- predict(fit_lda,newdata=testing)
confusionMatrix(pred,testing$classe)
fit_rf <- randomForest(classe ~ ., data=training)
predrf <- predict(fit_rf,newdata=testing)
confusionMatrix(predrf,testing$classe)
pred
predrf
str(pred)
confusionMatrix(pred$class,testing$classe)
confusionMatrix(predrf,testing$classe)
fit_rp <- rpart(classe ~ ., data=training)
require(rpart)
fit_rp <- rpart(classe ~ ., data=training)
pred_rp <- predict(fit_rf,newdata=testing)
cf_rp <- confusionMatrix(pred_rf,testing$classe)
pred_rp <- predict(fit_rp,newdata=testing)
cf_rp <- confusionMatrix(pred_rp,testing$classe)
?predict.rpart
str(pred_rp)
str(pred_rp[3])
str(pred_rp[,3])
str(pred_rp[,4])
str(pred_rp[,5])
pred_rp <- predict(fit_rp,newdata=testing, type="class")
pred_lda <- predict(fit_lda,newdata=testing)
pred_lda <- predict(fit_lda,newdata=testing, type="class")
pred_lda <- predict(fit_lda,newdata=testing, type="class")
cf_rp <- confusionMatrix(pred_rp,testing$classe)
cf_rp
pred_lda <- predict(fit_lda,newdata=testing)
cf_lda <- confusionMatrix(pred_lda$class,testing)
cf_lda <- confusionMatrix(pred_lda$class,testing$classe)
